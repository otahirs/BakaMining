@using System.IO
@using ProcessM.NET.Import
@using ProcessM.NET.Model
@using ProcessM.NET.Model.DataAnalysis
@inject Services.Storage.EventLogStore EventLogStore

<MudDialog>
    <DialogContent>
        @if (importedLog == null)
        {
            <MudAlert Severity="Severity.Warning" Class="mb-4">Files over aprox. 10 000 lines <br/>take a very lot of time to precess.</MudAlert>
            <InputFile id="fileInput" OnChange="OnFileSelected" hidden accept=".csv"/>

            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Outlined.FileUpload"
                       for="fileInput">
                Select File
            </MudButton>
        }
        else
        {
            @if (isLoading) {
                <MudProgressCircular Color="Color.Primary"  Indeterminate="true"/>
            } else {
                <MudList>
                    <MudListItem Icon="@Icons.Filled.AttachFile">
                        @form.file.Name <code>@form.file.Size bytes</code>
                    </MudListItem>
                </MudList>
                <MudForm @bind-IsValid="@form.IsValid">
                    <MudSelect T="string" Label="CaseId" AnchorOrigin="Origin.BottomCenter" Required="true" @bind-Value=@form.caseId>
                        @foreach (var it in importedLog.Contents.ColumnKeys)
                        {
                            <MudSelectItem Value="@(it)"/>
                        }
                    </MudSelect>
                    <MudSelect T="string" Label="Activity" AnchorOrigin="Origin.BottomCenter" Required="true" @bind-Value=@form.activity>
                        @foreach (var it in importedLog.Contents.ColumnKeys)
                        {
                            <MudSelectItem Value="@(it)"/>
                        }
                    </MudSelect>
                    
                    <br />
                    <MudSwitch Label="Timestamp" @bind-Checked="@form.hasTimestamp" Color="Color.Primary" />
                    @if (form.hasTimestamp){
                        <MudSelect T="string" Label="Timestamp" AnchorOrigin="Origin.BottomCenter" @bind-Value=@form.timestamp>
                            @foreach (var it in importedLog.Contents.ColumnKeys)
                            {
                                <MudSelectItem Value="@(it)"/>
                            }
                        </MudSelect>
                    }
                </MudForm>
            }
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!form.IsValid || isLoading)" Class="ml-auto" OnClick="UploadLog">Upload</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    
    ImportedEventLog importedLog;
    Form form;
    
    public struct Form
    {
        public IBrowserFile file;
        public bool IsValid = false;
        public string activity = String.Empty;
        public string caseId = String.Empty;
        public string timestamp = String.Empty;
        public bool hasTimestamp = false;
    }
    
    bool isLoading = false;
    
    private async void OnFileSelected(InputFileChangeEventArgs e)
    {
        foreach (var f in e.GetMultipleFiles())
        {
            form.file = f;
            await using var memoryString = new MemoryStream();
            await form.file.OpenReadStream(1000000000).CopyToAsync(memoryString);
            memoryString.Seek(0, SeekOrigin.Begin);
            importedLog = CSVImport.MakeDataFrame(memoryString);
        }
        StateHasChanged();
    }

    private async void UploadLog()
    {
        isLoading = true;
        StateHasChanged();
        await Task.Delay(1);
        importedLog.SetActivity(form.activity);
        importedLog.SetCaseId(form.caseId);
        if (form.hasTimestamp)
        {
            importedLog.SetTimestamp(form.timestamp);
        }
        var logFile = new EventLogFile()
        {
            Metadata = new FileMetadata()
            {
                Name = form.file.Name,
                Modified = form.file.LastModified,
                Size = form.file.Size
            },
            EventLog = new WorkflowLog(importedLog)
        };
        await EventLogStore.Add(logFile);
        MudDialog.Close(DialogResult.Ok(true));
    }
}