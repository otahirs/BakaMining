@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 70vh; overflow-y: scroll">
            <MudTable Items="Traces" Bordered="false" Dense="true" Elevation="0">
                <HeaderContent>
                    <MudTh>frequency</MudTh>
                    <MudTh>fitness</MudTh>
                    <MudTh>trace</MudTh>
                    <MudTh>visible</MudTh>
                </HeaderContent>
                <RowTemplate>
                    @{
                        var (key, (trace, fitness,freq)) = context;
                    }
                    <MudTd DataLabel="frequency">@freq</MudTd>
                    <MudTd DataLabel="fitness">@($"{fitness:0.00}")</MudTd>
                    <MudTd DataLabel="trace">&lt;@string.Join(", ", trace.Where(t => t != "<<start>>" && t != "<<end>>"))&gt;</MudTd>
                    <MudTd DataLabel="visible">
                        <MudToggleIconButton
                            Toggled="HiddenTraces.ContainsKey(key)"
                            ToggledChanged="() => TraceVisibilityChanged(key, trace, !HiddenTraces.ContainsKey(key))"
                            Icon="@Icons.Filled.Check"
                            Color="@Color.Default"
                            Title="Shown"
                            ToggledIcon="@Icons.Filled.HideSource"
                            ToggledColor="@Color.Error"
                            ToggledTitle="Hidden"
                            Size="Size.Small"
                            ToggledSize="Size.Small"
                        />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudContainer>
    </DialogContent>
    <DialogActions>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Dictionary<string, Tuple<List<string>, double, int>> Traces { get; set; } = new();
    
    [Parameter] public Dictionary<string, List<string>> HiddenTraces { get; set; } = new();
    
    [Parameter] public EventCallback<Tuple<string, List<string>, bool>> OnTraceVisibilityChanged { get; set; }
    
    private async Task TraceVisibilityChanged(string key, List<string> trace,  bool hide)
    {
        if (hide && Traces.Count == HiddenTraces.Count + 1)
        {
            await DialogService.ShowMessageBox("Cannot hide last activity", "");
            return;
        }
        await OnTraceVisibilityChanged.InvokeAsync(Tuple.Create(key, trace, hide));
        StateHasChanged();
    }
    
    
    
}