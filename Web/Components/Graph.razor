@using ProcessM.NET.Model
@using ProcessM.NET.Export
@using ProcessM.NET.Model.BasicPetriNet
@using System.Threading
@inject IJSRuntime JS
<style>
    .node {
        fill: #ccc;
        stroke: #000;
        stroke-width: 2px;
    }
   
    .link {
        stroke: #777;
        stroke-width: 2px;
    }
       
    .svg-container {
        width: 100%;
    }
</style>
@if (_petriNet == null)
{
    <MudText>No input data</MudText>
}
<div @ref="_graph"></div>


@code {
    private ElementReference _graph;

    private IPetriNet _petriNet;

    bool _graphInitiated = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("InitGraph", _graph);
            _graphInitiated = true;
            if (_petriNet != null)
            {
                await RenderGraph(_petriNet);
            }
        }
    }

    public async Task RenderGraph(IPetriNet updatedPetriNet)
    {
        _petriNet = updatedPetriNet;
        if (!_graphInitiated)
        {
            return;
        }
        var dotString = DOTExport.Serialize(_petriNet);
        await JS.InvokeVoidAsync("RenderGraph", dotString);
        StateHasChanged();
    }

}
