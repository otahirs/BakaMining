@using ProcessM.NET.Model
@using ProcessM.NET.Export
@using ProcessM.NET.Model.BasicPetriNet
@using System.Threading
@using ProcessM.NET.Model.DisplayPetriNet
@inject IJSRuntime JS
<style>
    .node {
        fill: #ccc;
        stroke: #000;
    }
    
    .node text {
        fill: black;
        stroke: none;
    }
   
    .link {
        stroke: #777;
        stroke-width: 2px;
    }
       
    .svg-container {
        width: 100%;
    }
    
    svg {
        height: 100%;
        width: 100%;
    }
    
    .context-menu {
        --context-menu-background-color: white;
        --context-menu-shadow: 0 4px 5px 0 rgba(0,0,0,0.14);
        --anypoint-item-before-background: none;
        --anypoint-item-focused-background-color: inherit;
    }
</style>
@if (_petriNet == null)
{
    <MudText>No input data</MudText>
}
<div @ref="_graph" style="height: 100%"></div>


@code {
    private ElementReference _graph;
    private DotNetObjectReference<Graph> _objeRef;

    private DPetriNet _petriNet;
    private bool _simplify = true;

    bool _graphInitiated = false;
    

    public async Task RenderGraph(IPetriNet updatedPetriNet)
    {
        _petriNet = new DPetriNet(updatedPetriNet);
        if (!_graphInitiated)
        {
            _objeRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("InitGraph", _graph, _objeRef);
            _graphInitiated = true;
        }
        var dotString = DOTExport.Serialize(_petriNet, _simplify);
        await JS.InvokeVoidAsync("RenderGraph", dotString);
        StateHasChanged();
    }

    public async Task Simplify(bool simplify)
    {
        _simplify = simplify;
        if (_graphInitiated)
        {
            var dotString = DOTExport.Serialize(_petriNet, _simplify);
            await JS.InvokeVoidAsync("RenderGraph", dotString);
        }
    }
    
    [JSInvokable]
    public async Task ChangeTransitionColor(string id, string newColor)
    {
        _petriNet.ChangeActivityColor(id, newColor);
        var dotString = DOTExport.Serialize(_petriNet, _simplify);
        await JS.InvokeVoidAsync("RenderGraph", dotString);
    }
    
    [JSInvokable]
    public async Task HideTransition(string id)
    {
        _petriNet.ToggleActivityHidden(id);
        var dotString = DOTExport.Serialize(_petriNet, _simplify);
        await JS.InvokeVoidAsync("RenderGraph", dotString);
    }

}
