
@page "/Storage/Models"
@using ProcessM.NET.Import
@using System.IO
@using BakaMining.Utils
@using Blazor.DownloadFileFast.Interfaces
@using ProcessM.NET.Export
@using ProcessM.NET.Model.BasicPetriNet
@inject Services.Storage.PetriNetStore PetriNetStore
@inject NavigationManager NavManager
@inject IBlazorDownloadFileService DownloadFileService
@inject IDialogService DialogService
<h2>Models</h2>
<InputFile id="fileInput" OnChange="UploadFile" hidden multiple />

<MudButton HtmlTag="label"
           Variant="Variant.Filled"
           Color="Color.Primary"
           StartIcon="@Icons.Material.Outlined.FileUpload"
           for="fileInput"
           Class="my-4">
     Import file - PNML
</MudButton>

<MudSimpleTable Elevation="0" Hover="true">
    <thead>
        <tr>
            <th>Name</th>
            <th>Show</th>
            <th>Export</th>
            <th>Size</th>
            <th>Modified</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var netFile in _netFiles)
        {
            <tr>
                <td>
                    <MudText Typo="Typo.subtitle2">@netFile.Metadata.Name</MudText>
                </td>
                <td>
                    <MudFab Icon="@Icons.Material.Outlined.PlayArrow" Size="Size.Small" Color="Color.Primary" OnClick='() => ShowGraphDialog(netFile)'/>
                </td>
                <td>
                    <MudButton StartIcon="@Icons.Filled.Download" Variant="Variant.Outlined" OnClick="() => DownloadPNML(netFile)">PNML</MudButton>
                    <MudButton StartIcon="@Icons.Filled.Download" Variant="Variant.Outlined" OnClick="() => DownloadDOT(netFile)">DOT</MudButton>
                </td>
                <td>
                    <MudText Typo="Typo.subtitle2">@Utils.GetBytesReadable(netFile.Metadata.Size)</MudText>
                </td>
                <td>
                    <MudText Typo="Typo.subtitle2">@Utils.GetDateReadable(netFile.Metadata.Modified)</MudText>
                </td>
                <td>
                    <MudFab Icon="@Icons.Material.Outlined.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => RemoveNet(netFile.Metadata.Name)"/>
                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

@code {

    private List<PetriNetFile> _netFiles = new();
    protected override async Task OnInitializedAsync()
    {
        await LoadNets();
    }
    
    private async Task LoadNets()
    {
        _netFiles = await PetriNetStore.GetAll();
    }
    
    private async void UploadFile(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            await using var memoryString = new MemoryStream();
            await file.OpenReadStream(1000000000).CopyToAsync(memoryString);
            memoryString.Seek(0, SeekOrigin.Begin);
            var netFile = new PetriNetFile()
            {
                Metadata = new FileMetadata()
                {
                    Name = file.Name,
                    Modified = file.LastModified,
                    Size = file.Size
                },
                PetriNet = PNMLImport.Deserialize(memoryString.ToString()) as PetriNet
            };
            await PetriNetStore.Add(netFile);
            _netFiles.Add(netFile);
        }
        StateHasChanged();
    }
    
    private async Task RemoveNet(string logFileName)
    {
        await PetriNetStore.Remove(logFileName);
        await LoadNets();
    }
    
    private async Task DownloadPNML(PetriNetFile netFile)
    {
        var file = System.Text.Encoding.UTF8.GetBytes(PNMLExport.Serialize(netFile.PetriNet));
        await DownloadFileService.DownloadFileAsync(netFile.Metadata.Name + ".pnml", file);
    }
    
    private async Task DownloadDOT(PetriNetFile netFile)
    {
        var file = System.Text.Encoding.UTF8.GetBytes(DOTExport.Serialize(netFile.PetriNet));
        await DownloadFileService.DownloadFileAsync(netFile.Metadata.Name  + ".dot", file);
    }
    
    private void ShowGraphDialog(PetriNetFile netFile)
    {
        var parameters = new DialogParameters
        {
            ["PetriNet"]=netFile.PetriNet
        };
        var options = new DialogOptions()
        {
            FullScreen = true,
            CloseButton = true
        };
        DialogService.Show<DialogShowGraph>(netFile.Metadata.Name, parameters, options);
    }
}