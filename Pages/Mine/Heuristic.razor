@page "/Mine/Heuristic/"
@page "/Mine/Heuristic/{Filename}"
@inject Services.Storage Storage
@using ProcessM.NET.Discovery.HeuristicMiner
@using ProcessM.NET.Model
@using ProcessM.NET.Model.DataAnalysis

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h3">Heuristic Miner</MudText>
    </MudItem>
    <MudItem xs="10" Style="background-color: white">
        <MudPaper Elevation="0">
            <Graph @ref="_graph"/>
        </MudPaper>
    </MudItem>
    <MudItem xs="2">
        <MudPaper Elevation="3">
            <EditForm Model="@_minerSettings" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator/>
                <MudCard>
                    <MudCardContent>
                        <MudNumericField T="double" Label="Dependency Threshold" HelperText=""
                                         @bind-Value="_minerSettings.DependencyThreshold" For="@(() => _minerSettings.DependencyThreshold)"/>
                        <MudNumericField T="double" Label="L1L Threshold" HelperText="" Class="mt-3"
                                         @bind-Value="_minerSettings.L1LThreshold" For="@(() => _minerSettings.L1LThreshold)"/>
                        <MudNumericField T="double" Label="L2L Threshold" HelperText="" Class="mt-3"
                                         @bind-Value="_minerSettings.L2LThreshold" For="@(() => _minerSettings.L2LThreshold)"/>
                        <MudNumericField T="double" Label="Relative To Best Threshold" HelperText="" Class="mt-3"
                                         @bind-Value="_minerSettings.RelativeToBestThreshold" For="@(() => _minerSettings.RelativeToBestThreshold)"/>
                        <MudSwitch Color="Color.Primary" Label="All Tasks Connected" Class="mt-3"
                                   @bind-Checked="_minerSettings.AllTasksConnected" For="@(() => _minerSettings.AllTasksConnected)"/> <br/>
                        <MudSwitch Color="Color.Primary" Label="Use Long Distance" HelperText="" Class="mt-3"
                                   @bind-Checked="_minerSettings.UseLongDistance" For="@(() => _minerSettings.UseLongDistance)"/>
                        <MudNumericField T="double" Label="Long Distance Threshold" HelperText="" Class="mt-3" Disabled="!_minerSettings.UseLongDistance"
                                         @bind-Value="_minerSettings.LongDistanceThreshold" For="@(() => _minerSettings.LongDistanceThreshold)"/>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Mine</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public string Filename { get; set; }
    private Graph _graph { get; set; } = new();
    private WorkflowLog _log { get; set; }
    private HeuristicMinerSettings _minerSettings = new();
    private bool _firstRender = true;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _log = Storage.GetEventLog(Filename).EventLog;
            await UpdateGraph();
        }
    }
    
    private async Task OnValidSubmit()
    {
        await UpdateGraph();
    }

    private async Task UpdateGraph()
    {
        var petriNet = HeuristicMiner.MinePetriNet(_log, _minerSettings);
        await _graph.UpdateGraph(petriNet);
    }

}