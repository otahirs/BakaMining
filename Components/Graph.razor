@using ProcessM.NET.Model
@inject IJSRuntime JS
<style>
    .node {
        fill: #ccc;
        stroke: #fff;
        stroke-width: 2px;
    }
   
    .link {
        stroke: #777;
        stroke-width: 2px;
    }
   
    .svg-container {
        height: 100vh;
        width: 100%;
    }
</style>
@if (PetriNet == null)
{
    <MudText>No input data</MudText>
}
else 
{
    <div @ref="_graph"></div>
}




@code {
    private ElementReference _graph;
    
    [Parameter]
    public IPetriNet PetriNet { get; set; }

    class Link
    {
        public string source { get; set; }
        public string target { get; set; }
        public string activity { get; set; }
        public bool invisible { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (PetriNet == null)
            return;
        if (firstRender)
        {
            var start_node = new { id = PetriNet.StartPlace.Id };
            var end_node = new { id = PetriNet.EndPlace.Id };

            var nodes = new List<object>() ;
            nodes.AddRange(
                PetriNet.Places.Select(p => new { id = p.Id, type = "place" }).ToList()
                );
            nodes.AddRange(
                PetriNet.Transitions.Select(t => new { id = t.Activity, type = "transition" }).ToList()
                );
            
            var links = new List<Link>();
            foreach (ITransition transition in PetriNet.Transitions)
            {
                foreach (IPlace inputPlace in transition.InputPlaces)
                {
                    links.Add(new Link
                    {
                        source = inputPlace.Id,
                        target = transition.Activity,
                        invisible = transition.Invisible
                    });
                }
                foreach (IPlace outputPlace in transition.OutputPlaces)
                {
                    links.Add(new Link
                    {
                        source = transition.Activity,
                        target = outputPlace.Id,
                        invisible = transition.Invisible
                    });
                }
            }

            await JS.InvokeVoidAsync(
                "DrawGraph", _graph, nodes, links, start_node, end_node);
        }
    }

}
