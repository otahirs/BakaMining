@using ProcessM.NET.Model
@using ProcessM.NET.Export
@using ProcessM.NET.Model.BasicPetriNet
@inject IJSRuntime JS
<style>
    .node {
        fill: #ccc;
        stroke: #000;
        stroke-width: 2px;
    }
   
    .link {
        stroke: #777;
        stroke-width: 2px;
    }
       
    .svg-container {
        height: 100vh;
        width: 100%;
    }
</style>
@if (PetriNet == null)
{
    <MudText>No input data</MudText>
}
<div @ref="_graph"></div>


@code {
    private ElementReference _graph;
    
    [Parameter]
    public IPetriNet PetriNet { get; set; }

    bool _graphInitiated = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_graphInitiated)
        {
            await InitGraph();
        }
    }

    public async Task UpdateGraph(PetriNet updatedPetriNet)
    {
        PetriNet = updatedPetriNet;
        var dotString = DOTExport.Serialize(PetriNet);
        if (!_graphInitiated)
        {
            await InitGraph(dotString);
        }
        else
        {
            await JS.InvokeVoidAsync("UpdateGraph", dotString);
        }
        StateHasChanged();
    }

    private async Task InitGraph(string dotString = "")
    {
        if (PetriNet != null && string.IsNullOrEmpty(dotString))
            dotString = DOTExport.Serialize(PetriNet);
        
        await JS.InvokeVoidAsync("DrawGraph", _graph, dotString);
        _graphInitiated = true;
    }

}
